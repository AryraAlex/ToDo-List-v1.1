@charset "UTF-8";
@import url("https://fonts.googleapis.com/css2?family=Karla:ital,wght@0,200..800;1,200..800&display=swap");
:root {
  --spacing: 1rem;
  --fontSize: 18px;
}

body {
  font-family: "Karla", sans-serif;
  font-size: var(--fontSize);
  background-color: #f0f0f0;
}

section {
  background-color: #fff;
  border-radius: 1rem;
  padding: calc(var(--spacing) * 2);
  box-shadow: 0px 10px 30px #c0c0c0;
}

.title {
  display: block;
  text-align: center;
  color: #8052ec;
  font-size: clamp(1.5rem, 1.1373966942rem + 1.4876033058vw, 2.625rem);
  font-weight: 600;
}

.button {
  background-color: #8052ec;
  color: #fff;
  border: none;
  transition-duration: 0.3s;
  cursor: pointer;
}
.button:hover {
  background-color: #d888f1;
}
.button:active {
  transform: scale(0.9);
}

/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
   Убираем внутренние отступы слева тегам списков,
   у которых есть атрибут class
  */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
   Убираем внешние отступы body и двум другим тегам,
   у которых есть атрибут class
  */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
   Убираем внешние отступы вертикали нужным тегам,
   у которых есть атрибут class
  */
:where(h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
   Убираем стандартный маркер маркированному списку,
   у которого есть атрибут class
  */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
   Обнуляем вертикальные внешние отступы параграфа,
   объявляем локальную переменную для внешнего отступа вниз,
   чтобы избежать взаимодействие с более сложным селектором
  */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
   Внешний отступ вниз для параграфа без атрибута class,
   который расположен не последним среди своих соседних элементов
  */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
   Упрощаем работу с изображениями и видео
  */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
   Наследуем свойства шрифт для полей ввода
  */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
  height: 100%;
  /**
     Убираем скачок интерфейса по горизонтали
     при появлении / исчезновении скроллбара
    */
  scrollbar-gutter: stable;
}

/**
   Плавный скролл
  */
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
  min-height: 100%;
  /**
     Унифицированный интерлиньяж
    */
  line-height: 1.5;
}

/**
   Нормализация высоты элемента ссылки при его инспектировании в DevTools
  */
a:where([class]) {
  display: inline-flex;
}

/**
   Курсор-рука при наведении на элемент
  */
button,
label {
  cursor: pointer;
}

/**
   Чиним баг задержки смены цвета при взаимодействии с svg-элементами
  */
svg * {
  transition-property: fill, stroke;
}

/**
   Удаляем все анимации и переходы для людей,
   которые предпочитают их не использовать
  */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
.container {
  max-width: 50vw;
  margin: calc(var(--spacing) * 2) auto;
}

.margin-bottom {
  margin-bottom: calc(var(--spacing) * 4);
}

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;
  white-space: nowrap;
  -webkit-clip-path: inset(100%);
          clip-path: inset(100%);
  clip: rect(0 0 0 0);
  overflow: hidden;
}

.done {
  opacity: 0.2;
}

header {
  background-color: #f3f2ff;
  border-radius: 10px 10px 0 0;
}

.input-area__form {
  display: flex;
}
.input-area__task {
  flex: 1;
  padding: 0.625rem 1.25rem;
  border: 2px solid #8052ec;
  border-radius: 6px 0 0 6px;
  background-color: transparent;
  transition-duration: 0.3s;
}
.input-area__task:focus, .input-area__task:focus-visible {
  outline: none;
  border-color: #d888f1;
}
.input-area__button {
  border-radius: 0 6px 6px 0;
}

.task-area__title {
  background-color: #f3f2ff;
  margin-bottom: calc(var(--spacing) * 2);
}
.task-area__task-empty {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.task-area__icon-button {
  background-color: transparent;
  outline: none;
  border: none;
  transition-duration: 0.3s;
  cursor: pointer;
}
.task-area__icon-button:hover {
  transform: scale(1.05);
}
.task-area .list__item {
  display: flex;
  align-items: flex-end;
  gap: 0.625rem;
  margin-bottom: calc(var(--spacing) * 2);
}
.task-area .list__item-name {
  flex: 1;
  border-bottom: 2px solid #8052ec;
}
.task-area .list__button {
  position: relative;
  padding: 0;
  background-color: transparent;
}
.task-area .list__button:hover {
  transform: scale(1.05);
}
.task-area .list__item-icon {
  pointer-events: none;
  transition-duration: 0.3s;
}
.task-area .list .checkmark {
  position: absolute;
  left: 2px;
  top: 5px;
}

.checkbox {
  border: 4px solid #8052ec;
  border-radius: 4px;
  width: 40px;
  height: 40px;
}

.filter-area {
  display: flex;
  justify-content: center;
  gap: 1rem;
}
.filter-area__button {
  border-radius: 1rem;
  padding: 0.5rem 0.75rem;
  transition-duration: 0.3s;
}
.filter-area__button:hover {
  transform: scale(1.05);
}
.filter-area__button:active {
  transform: scale(0.9);
}

.filter-area__button--active {
  background-color: #d888f1;
  border-radius: 5px;
}/*# sourceMappingURL=main.css.map */